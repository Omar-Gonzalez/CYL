"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),DEBUG=!0,pixelSize=5;window.l=function(e){DEBUG&&console.log(e)};var Scene=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t;_classCallCheck(this,e),this.screen=document.getElementById("screen"),this.canvas=document.getElementById("game"),this.pixelSize=t,this.ctx=this.canvas.getContext("2d"),this._canvasDimensions()}return _createClass(e,[{key:"_canvasDimensions",value:function(){var e=this;this.canvas.width=this.screen.offsetWidth,this.canvas.height=this.screen.offsetHeight,window.addEventListener("resize",function(){e.canvas.width=e.screen.offsetWidth,e.canvas.height=e.screen.offsetHeight,l("CYL: Canvas resize: "+e.canvas.width)})}},{key:"_drawPixel",value:function(e){var t="";(e.x>this.maxXPos||e.x<0)&&(t="CYL: attempting to render pixel.x outside canvas"),(e.y>this.maxYPos||e.y<0)&&(t+="\nCYL: attempting to render pixel.y outside canvas"),t.length>0?l(t):(this.ctx.fillStyle=e.color,this.ctx.fillRect(e.x,e.y,this.pixelSize,this.pixelSize))}},{key:"maxXPos",get:function(){return this.canvas.width-this.pixelSize}},{key:"maxYPos",get:function(){return this.canvas.height-this.pixelSize}}]),e}(),scene=new Scene(pixelSize),pixel={x:400,y:200,color:"white"};scene._drawPixel(pixel);var Sprite=function(){function e(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:4,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(_classCallCheck(this,e),4===i&&l("CYL:Warning, default 4 sprite size, make sure you are passing width param"),void 0!==t)if(Array.isArray(t)){this.x=n,this.y=s,this.pixels=[];var a=0,r=0,o=0,c=!0,h=!1,u=void 0;try{for(var f,v=t[Symbol.iterator]();!(c=(f=v.next()).done);c=!0){var x=f.value;this.pixels.push({x:a,y:r,color:x}),a+=scene.pixelSize,++o===i&&(r+=scene.pixelSize,a=0,o=0)}}catch(e){h=!0,u=e}finally{try{!c&&v.return&&v.return()}finally{if(h)throw u}}}else l("CYL : Shape object must be an array");else l("CYL : You need a shape to initialize a sprite")}return _createClass(e,[{key:"shape",get:function(){return this.pixels}}]),e}(),ghost=new Sprite([0,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],5);console.log(ghost.shape);
//# sourceMappingURL=crayola.min.js.map